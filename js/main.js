// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Arc, C, Factions, Rep, deg, drawRepresentative, phiAtRadius, rad, x, y;

  C = {
    x: 400,
    y: 400
  };

  Arc = {
    innerR: 100,
    outerR: 400,
    phiMax: 180
  };

  Rep = {
    r: 8,
    spacing: 17.5
  };

  Factions = [
    {
      name: 'Die Linke',
      "class": 'linke'
    }, {
      name: 'SPD',
      "class": 'spd'
    }, {
      name: 'Bündnis 90/Die Grünen',
      "class": 'gruene'
    }, {
      name: 'FDP',
      "class": 'fdp'
    }, {
      name: 'CDU/CSU',
      "class": 'cducsu'
    }
  ];

  x = function(phi, r) {
    return C.x - r * Math.cos(rad(phi));
  };

  y = function(phi, r) {
    return C.y - r * Math.sin(rad(phi));
  };

  deg = function(rad) {
    return 360 * rad / (2 * Math.PI);
  };

  rad = function(deg) {
    return (2 * Math.PI) * deg / 360;
  };

  phiAtRadius = function(r) {
    return deg(Math.atan2(Rep.spacing, r));
  };

  drawRepresentative = function(rep, phi, r) {
    var div;
    div = $('<div>');
    div.addClass('representative');
    div.css({
      left: x(phi, r),
      top: y(phi, r)
    });
    return $('#parliament').append(div);
  };

  $.getJSON('/data/data.json', function(data) {
    var coordinatesAtIndex, dataByFaction, phi, seats, totalSeats, _data;
    data = data.data;
    _data = _(data);
    console.log(data);
    dataByFaction = _data.groupBy('fraktion').value();
    seats = _.mapValues(dataByFaction, function(f) {
      return f.length;
    });
    totalSeats = _.reduce(seats, function(sum, num) {
      return sum + num;
    });
    console.log(seats);
    coordinatesAtIndex = function(factionName, index) {
      var factionPhi, i, phi, phiInThisRow, r, repsInThisRow;
      r = Arc.innerR;
      factionPhi = Arc.phiMax * (seats[factionName] / totalSeats);
      i = -1;
      phi = 0;
      while (!(i >= index)) {
        phiInThisRow = phiAtRadius(r);
        repsInThisRow = Math.floor(factionPhi / phiInThisRow);
        if (i + repsInThisRow >= index) {
          phi = (factionPhi / repsInThisRow) * (i + repsInThisRow - index);
          break;
        }
        r += Rep.spacing;
        i += repsInThisRow;
      }
      return {
        phi: phi,
        r: r
      };
    };
    phi = 0;
    return _(Factions).each(function(faction) {
      var coords, factionName, i, r, representative, _i, _len, _ref;
      factionName = faction.name;
      if (!dataByFaction[factionName]) {
        return;
      }
      r = Arc.innerR;
      _ref = dataByFaction[factionName];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        representative = _ref[i];
        coords = coordinatesAtIndex(factionName, i);
        console.log(coords);
        drawRepresentative(representative, phi + coords.phi, coords.r);
      }
      return phi += Arc.phiMax * (seats[factionName] / totalSeats);
    });
  });

}).call(this);


//# sourceMappingURL=main.map
