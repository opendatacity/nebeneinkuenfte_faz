// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Arc, C, Factions, Rep, deg, drawRepresentative, phiAtRadius, rad, x, y;

  C = {
    x: 400,
    y: 400
  };

  Arc = {
    innerR: 100,
    outerR: 400,
    phiMax: 180
  };

  Rep = {
    r: 5,
    spacing: 12
  };

  Factions = [
    {
      name: 'Die Linke',
      "class": 'linke'
    }, {
      name: 'SPD',
      "class": 'spd'
    }, {
      name: 'Bündnis 90/Die Grünen',
      "class": 'gruene'
    }, {
      name: 'FDP',
      "class": 'fdp'
    }, {
      name: 'CDU/CSU',
      "class": 'cducsu'
    }
  ];

  x = function(phi, r) {
    return C.x - r * Math.cos(rad(phi));
  };

  y = function(phi, r) {
    return C.y - r * Math.sin(rad(phi));
  };

  deg = function(rad) {
    return 360 * rad / (2 * Math.PI);
  };

  rad = function(deg) {
    return (2 * Math.PI) * deg / 360;
  };

  phiAtRadius = function(r) {
    return deg(Math.atan2(Rep.spacing, r));
  };

  drawRepresentative = function(rep, phi, r) {
    var div;
    div = $('<div>');
    div.addClass('representative');
    div.data('representative', rep);
    div.addClass(_.find(Factions, {
      name: rep.fraktion
    })["class"]);
    $('#parliament').append(div);
    return div[0];
  };

  $.getJSON('/data/data.json', function(data) {
    var coordinatesAtIndex, dataByFaction, drawOrMoveRepresentatives, factionPhi, hideRepresentatives, nebeneinkuenfeSumMax, seats, totalSeats;
    data = data.data;
    window._data = _(data);
    _data.each(function(rep) {
      return rep.nebeneinkuenfteSum = rep.nebeneinkuenfte.reduce((function(sum, nebeneinkunft) {
        return sum + nebeneinkunft.level;
      }), 0);
    });
    nebeneinkuenfeSumMax = _data.max('nebeneinkuenfteSum').value().nebeneinkuenfteSum;
    console.log(nebeneinkuenfeSumMax);
    console.log(data.slice(0, 6));
    dataByFaction = _data.groupBy('fraktion').value();
    seats = _.mapValues(dataByFaction, function(f) {
      return f.length;
    });
    totalSeats = _.reduce(seats, function(sum, num) {
      return sum + num;
    });
    factionPhi = function(factionName) {
      return Arc.phiMax * (seats[factionName] / totalSeats);
    };
    coordinatesAtIndex = function(rep, index) {
      var fPhi, i, margin, phi, phiInThisRow, r, rMin, repsInThisRow;
      r = Arc.innerR + Rep.spacing;
      i = -1;
      phi = null;
      rMin = 0;
      while (true) {
        phiInThisRow = phiAtRadius(r);
        margin = phiInThisRow;
        fPhi = factionPhi(rep.fraktion) - 2 * margin;
        repsInThisRow = Math.ceil(fPhi / phiInThisRow);
        if (i + repsInThisRow >= index) {
          phi = (fPhi / Math.max(repsInThisRow - 1, 1)) * (i + repsInThisRow - index);
          phi += margin;
          break;
        }
        r += Rep.spacing;
        i += repsInThisRow;
      }
      return {
        phi: phi,
        r: Math.max(r, rMin)
      };
    };
    drawOrMoveRepresentatives = function(repsByFaction) {
      var coords, faction, factionName, i, phi, r, rep, _i, _j, _len, _len1, _ref, _results;
      phi = 0;
      _results = [];
      for (_i = 0, _len = Factions.length; _i < _len; _i++) {
        faction = Factions[_i];
        factionName = faction.name;
        if (!repsByFaction[factionName]) {
          continue;
        }
        r = Arc.innerR;
        _ref = repsByFaction[factionName];
        for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
          rep = _ref[i];
          coords = coordinatesAtIndex(rep, i);
          if (!rep.element) {
            rep.element = drawRepresentative(rep);
          }
          $(rep.element).removeClass('hidden').css({
            left: x(phi + coords.phi, coords.r),
            top: y(phi + coords.phi, coords.r)
          });
        }
        _results.push(phi += factionPhi(factionName));
      }
      return _results;
    };
    hideRepresentatives = function(repsByFaction) {
      var faction, rep, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = Factions.length; _i < _len; _i++) {
        faction = Factions[_i];
        if (!repsByFaction[faction.name]) {
          continue;
        }
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = repsByFaction[faction.name];
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            rep = _ref[_j];
            _results1.push($(rep.element).addClass('hidden'));
          }
          return _results1;
        })());
      }
      return _results;
    };
    drawOrMoveRepresentatives(dataByFaction);
    $('form').on('submit', function(event) {
      var filter, form, groupedData, inputs;
      form = $(this);
      inputs = form.find('input[name]:not(:checkbox), :checkbox:checked');
      event.preventDefault();
      filter = _(inputs.get()).groupBy('name').mapValues(function(inputs) {
        return inputs.map(function(input) {
          return $(input).val();
        });
      });
      filter = filter.value();
      groupedData = _data.groupBy(function(rep) {
        return _(filter).reduce(function(sum, filterValues, filterProperty) {
          var keep;
          keep = _.contains(filterValues, rep[filterProperty]);
          return Boolean(sum * keep);
        }, true);
      });
      groupedData = groupedData.mapValues(function(reps) {
        return _.groupBy(reps, 'fraktion');
      }).value();
      if (groupedData["true"]) {
        drawOrMoveRepresentatives(groupedData["true"]);
      }
      if (groupedData["false"]) {
        return hideRepresentatives(groupedData["false"]);
      }
    });
    return $('form').on('change', 'input', function() {
      return $(this).submit();
    });
  });

}).call(this);


//# sourceMappingURL=main.map
